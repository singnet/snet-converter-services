service: converterservices
frameworkVersion: "3"

plugins:
  # - serverless-offline
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation
  - serverless-latest-layer-version
  # - serverless-python-requirements
  - serverless-api-gateway-caching
  - serverless-plugin-warmup
  - serverless-plugin-log-subscription

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  logRetentionInDays: 30
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: converter-service
      key2: converter-event-consumer
      key3: converter-bridge
  deploymentPrefix: serverless
  tracing: true
  logs:
    restApi: true
  apiGateway:
    disableDefaultEndpoint: true

custom:
  # pythonRequirements:
  #   fileName: requirements.txt
  #   dockerizePip: true
  #   useDownloadCache: true
  #   useStaticCache: true
  #   cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 5
  defaultLayers:
    - ${file(./config.${self:provider.stage}.json):MplaceCommonCode_Layer}
    - ${file(./config.${self:provider.stage}.json):SnetContract}
    - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib_Layer}
  defaultVpc:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.json):SG1}
      - ${file(./config.${self:provider.stage}.json):SG2}
    subnetIds:
      - ${file(./config.${self:provider.stage}.json):VPC1}
      - ${file(./config.${self:provider.stage}.json):VPC2}
  defaultVpcWithCardanoSG:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.json):SG1}
      - ${file(./config.${self:provider.stage}.json):CardanoSG}
    subnetIds:
      - ${file(./config.${self:provider.stage}.json):VPC1}
      - ${file(./config.${self:provider.stage}.json):VPC2}
  defaultCors:
    origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - x-requested-with
  defaultQueueRetry: 5
  defaultMessageRetentionPeriod: 14400
  documentation:
    models:
      - name: "ApiErrorMessage"
        description: "API Error Response"
        contentType: "application/json"
        schema: ${file(documentation/models/error.json):ApiError}

      - name: "LambdaErrorMessage"
        description: "Server is not able to process the client request"
        contentType: "application/json"
        schema: ${file(documentation/models/error.json):LambdaError}

      - name: "GetAllBlockchainOutput"
        description: "Get all blockchain response model"
        contentType: "application/json"
        schema: ${file(documentation/models/blockchain.json):GetAllBlockchainOutput}

      - name: "GetAllTokenPairOutput"
        description: "Get all token pair response model"
        contentType: "application/json"
        schema: ${file(documentation/models/token.json):GetAllTokenPairOutput}

      - name: "CreateConversionRequestInput"
        description: "create a conversion request model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateConversionRequestInput}
      
      - name: "CreateConversionRequestOutput"
        description: "create a conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateConversionRequestOutput}

      - name: "GetConversionHistoryInput"
        description: "Get the conversion history request  model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionHistoryInput}

      - name: "GetConversionHistoryOutput"
        description: "Get the conversion history response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionHistoryOutput}

      - name: "CreateTransactionForConversionInput"
        description: "Create a transaction for the conversion request model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateTransactionForConversionInput}

      - name: "CreateTransactionForConversionOutput"
        description: "Create a transaction for the conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateTransactionForConversionOutput}

      - name: "ClaimConversionRequestInput"
        description: "Claim conversion request model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):ClaimConversionRequestInput}

      - name: "ClaimConversionRequestOutput"
        description: "Claim conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):ClaimConversionRequestOutput}

      - name: "GetConversionRequestOutput"
        description: "Get conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionRequestOutput}

      - name: "WalletsAddressRequestOutput"
        description: "Get wallet's address "
        contentType: "application/json"
        schema: ${file(documentation/models/wallet.json):WalletsAddressRequestOutput}

      - name: "GetConversionStatusCountOutput"
        description: "Get Conversion Status Count Output"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionStatusCountOutput}

      - name: "GetLiquidityDataOutput"
        description: "Get Liquidity Data Output"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetLiquidityDataOutput}

#      - name: "GetTransactionByConversionOutput"
#        description: "Get Transaction By Conversion Output"
#        contentType: "application/json"
#        schema: ${file(documentation/models/conversion.json):GetTransactionByConversionOutput}
  apiGatewayCaching:
    enabled: true
    clusterSize: '0.5'
    ttlInSeconds: 3600
    dataEncrypted: true
  warmup:
    default:
      enabled: false # Whether to warm up functions by default or not
      folderName: '.warmup' # Name of the folder created for the generated warmup
      cleanFolder: false
      memorySize: 256
      name: warmer-default
      role: ${file(./config.${self:provider.stage}.json):ROLE}
      vpc: ${self:custom.defaultVpc}
      events:
        - schedule: rate(5 minutes) # Run WarmUp every 5 minutes
      prewarm: true # Run WarmUp immediately after a deploymentlambda
      concurrency: 1 # Warm up 1 concurrent instances
  logSubscription:
    enabled: true
    destinationArn: ${file(./config.${self:provider.stage}.json):ALERTING_LAMBDA_ARN}
    filterPattern: '?"ERROR" ?"Error" ?"error" ?"timed out"'
    addLambdaPermission: false

package:
  patterns:
    - "!.circleci/**"
    - "!.gitignore/**"
    - "!.serverless/**"
    - "!requirements.txt"
    - "!venv/**"
    - "!serverless.yml"
    - "!test/**"
    - "!tests/**"
    - "!repository/**"
    - "!Readme.md"
    - "!package.json"
    - "!Dockerfile"
    - "!License"
    - "!node_modules/**"
    - "!common"
    - "!testcases"

resources:
  Resources:
    onlyParams:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'Validate Parameters'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true

    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'Validate body, Parameters'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

    converterEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-event-consumer
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt converterEventConsumerDLQQueue.Arn
          maxReceiveCount: 15

    converterEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterEventConsumerQueue
          Statement:
            - Sid: AllowCardanoEventListener
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}
        Queues:
          - !Ref converterEventConsumerQueue

    cardanoEventListenerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt converterEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):CARDANO_EVENT_LISTENER_TOPIC_ARN}
        FilterPolicy:
          event_type:
            - TOKEN_TRANSFER
            - TOKEN_BURNED
            - TOKEN_MINTED


    converterEventConsumerDLQQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-event-consumer-dlq
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: 604800

    converterEventConsumerDLQQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterEventConsumerDLQQueue
          Statement:
            - Sid: Allow-SQS-SendMessage
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterEventConsumerDLQQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt converterEventConsumerQueue.Arn
        Queues:
          - !Ref converterEventConsumerDLQQueue

    converterBridgeQueue1:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-bridge1.fifo
        VisibilityTimeout: 320
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt converterBridgeDLQQueue.Arn
          maxReceiveCount: ${self:custom.defaultQueueRetry}

    converterBridgeQueue1Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterBridgeQueue1
          Statement:
            - Sid: sns1Subscribe
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterBridgeQueue1.Arn
        Queues:
          - !Ref converterBridgeQueue1

    converterBridgeQueue2:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-bridge2.fifo
        VisibilityTimeout: 320
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt converterBridgeDLQQueue.Arn
          maxReceiveCount: ${self:custom.defaultQueueRetry}

    converterBridgeQueue2Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterBridgeQueue2
          Statement:
            - Sid: sns1Subscribe
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterBridgeQueue2.Arn
        Queues:
          - !Ref converterBridgeQueue2

    converterBridgeQueue3:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-bridge3.fifo
        VisibilityTimeout: 320
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt converterBridgeDLQQueue.Arn
          maxReceiveCount: ${self:custom.defaultQueueRetry}

    converterBridgeQueue3Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterBridgeQueue3
          Statement:
            - Sid: sns1Subscribe
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterBridgeQueue3.Arn
        Queues:
          - !Ref converterBridgeQueue3

    converterBridgeQueue4:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-bridge4.fifo
        VisibilityTimeout: 320
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: ${self:custom.defaultMessageRetentionPeriod}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt converterBridgeDLQQueue.Arn
          maxReceiveCount: ${self:custom.defaultQueueRetry}

    converterBridgeQueue4Policy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterBridgeQueue4
          Statement:
            - Sid: sns1Subscribe
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterBridgeQueue4.Arn
        Queues:
          - !Ref converterBridgeQueue4

    converterBridgeDLQQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: false
        QueueName: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-converter-bridge-dlq.fifo
        VisibilityTimeout: 60
        ReceiveMessageWaitTimeSeconds: 20
        MessageRetentionPeriod: 604800

    converterBridgeDLQQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: converterBridgeDLQQueue
          Statement:
            - Sid: Allow-SQS-SendMessage
              Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: !GetAtt converterBridgeDLQQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    - !GetAtt converterBridgeQueue1.Arn
                    - !GetAtt converterBridgeQueue2.Arn
                    - !GetAtt converterBridgeQueue3.Arn
                    - !GetAtt converterBridgeQueue4.Arn
        Queues:
          - !Ref converterBridgeDLQQueue

functions:
  get_all_blockchain:
    handler: application/handler/blockchain_handlers.get_all_blockchain
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/blockchain
          method: get
          cors: ${self:custom.defaultCors}
          caching:
            enabled: true
          documentation:
            summary: "Get all blockchain"
            description: "Get all blockchain for the converter bridge"
            tags:
              - "Blockchain"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get all blockchain"
                responseModels:
                  "application/json": "GetAllBlockchainOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_token_pair:
    handler: application/handler/token_handlers.get_all_token_pair
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/token/pair
          method: get
          cors: ${self:custom.defaultCors}
          caching:
            enabled: true
          documentation:
            summary: "Get all token pair"
            description: "Get all token pair for the converter bridge"
            tags:
              - "Token"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get all token pair"
                responseModels:
                  "application/json": "GetAllTokenPairOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  create_conversion_request:
    handler: application/handler/conversion_handlers.create_conversion_request
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    warmup: true
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_DERIVED_ADDRESS_SERVICE_BASE_PATH}
      CONVERTER_ETHEREUM_SIGNER_PRIVATE_KEY_PATH: ${file(./config.${self:provider.stage}.json):CONVERTER_ETHEREUM_SIGNER_PRIVATE_KEY_PATH}
      CONVERTER_BINANCE_SIGNER_PRIVATE_KEY_PATH: ${file(./config.${self:provider.stage}.json):CONVERTER_BINANCE_SIGNER_PRIVATE_KEY_PATH}
    events:
      - http:
          path: /v1/conversion
          method: post
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyBody
          documentation:
            summary: "Create a conversion request"
            description: "Create a conversion request"
            tags:
              - "Conversion"
            requestModels:
              "application/json": "CreateConversionRequestInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Successfully made a conversion request"
                responseModels:
                  "application/json": "CreateConversionRequestOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  create_transaction_for_conversion:
    handler: application/handler/conversion_handlers.create_transaction_for_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/transaction
          method: post
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyBody
          documentation:
            summary: "Create a transaction for conversion request"
            description: "Create a transaction for conversion request"
            tags:
              - "Transaction"
            requestModels:
              "application/json": "CreateTransactionForConversionInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Create a transaction for conversion request"
                responseModels:
                  "application/json": "CreateTransactionForConversionOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_conversion_history:
    handler: application/handler/conversion_handlers.get_conversion_history
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/conversion/history
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                address: true
                page_size: false
                page_number: false
          documentation:
            summary: "Getting the conversion history"
            description: "Getting the conversion history"
            tags:
              - "Conversion"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Getting the  conversion history"
                responseModels:
                  "application/json": "GetConversionHistoryOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_transaction_by_conversion_id:
    handler: application/handler/conversion_handlers.get_transaction_by_conversion_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/transaction
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                conversion_id: true
          documentation:
            summary: "Getting the transaction for the given conversion id"
            description: "Getting the transaction for the given conversion id"
            tags:
              - "Transaction"
            methodResponses:
 #             - statusCode: "200"
 #               responseBody:
 #                 description: "Getting the transactions"
 #               responseModels:
 #                 "application/json": "GetTransactionByConversionOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  claim_conversion:
    handler: application/handler/conversion_handlers.claim_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE_WITH_SM}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    environment:
      CONVERTER_ETHEREUM_SIGNER_PRIVATE_KEY_PATH: ${file(./config.${self:provider.stage}.json):CONVERTER_ETHEREUM_SIGNER_PRIVATE_KEY_PATH}
      CONVERTER_BINANCE_SIGNER_PRIVATE_KEY_PATH: ${file(./config.${self:provider.stage}.json):CONVERTER_BINANCE_SIGNER_PRIVATE_KEY_PATH}
    events:
      - http:
          path: /v1/conversion/{conversion_id}/claim
          method: post
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyBody
          request:
            paths:
              conversion_id: true
          documentation:
            summary: "Claim the conversion"
            description: "Claim  the conversion"
            tags:
              - "Conversion"
              - "Claim"
            requestModels:
              "application/json": "ClaimConversionRequestInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Claim the conversion"
                responseModels:
                  "application/json": "ClaimConversionRequestOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_conversion:
    handler: application/handler/conversion_handlers.get_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/conversion/{conversion_id}
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            paths:
              conversion_id: true
          documentation:
            summary: "Get the conversion detail"
            description: "Get the conversion detail"
            tags:
              - "Conversion"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get the conversion"
                responseModels:
                  "application/json": "GetConversionRequestOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_wallets_address_by_ethereum_address:
    handler: application/handler/wallet_handlers.get_wallets_address_by_ethereum_address
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/wallet/address
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                ethereum_address: true
          documentation:
            summary: "Get wallets address by ethereum address"
            description: "Get wallets address by ethereum address"
            tags:
              - "Wallet"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get wallets address by ethereum address"
                responseModels:
                  "application/json": "WalletsAddressRequestOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  post_converter_ethereum_events_to_queue:
    handler: application/handler/consumer_handlers.post_converter_ethereum_events_to_queue
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}

  converter_event_consumer:
    handler: application/handler/consumer_handlers.converter_event_consumer
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - converterEventConsumerQueue
              - Arn
          batchSize: 1

  converter_bridge1:
    handler: application/handler/consumer_handlers.converter_bridge
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_SERVICE_BASE_PATH_1}
    timeout: 300
    maximumRetryAttempts: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - converterBridgeQueue1
              - Arn
          batchSize: 1

  converter_bridge2:
    handler: application/handler/consumer_handlers.converter_bridge
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_SERVICE_BASE_PATH_2}
    timeout: 300
    maximumRetryAttempts: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - converterBridgeQueue2
              - Arn
          batchSize: 1

  converter_bridge3:
    handler: application/handler/consumer_handlers.converter_bridge
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_SERVICE_BASE_PATH_3}
    timeout: 300
    maximumRetryAttempts: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - converterBridgeQueue3
              - Arn
          batchSize: 1

  converter_bridge4:
    handler: application/handler/consumer_handlers.converter_bridge
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_SERVICE_BASE_PATH_4}
    timeout: 300
    maximumRetryAttempts: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - converterBridgeQueue4
              - Arn
          batchSize: 1

  get_all_deposit_address:
    handler: application/handler/wallet_handlers.get_all_deposit_address
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}

  get_conversion_history_count:
    handler: application/handler/conversion_handlers.get_conversion_count_by_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    warmup: true
    events:
      - http:
          path: /v1/conversion/count
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                address: true
          documentation:
            summary: "Getting the conversion history count"
            description: "Getting the conversion history count"
            tags:
              - "Conversion"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Getting the  conversion history count"
                responseModels:
                  "application/json": "GetConversionStatusCountOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  expire_conversion:
    handler: application/handler/conversion_handlers.expire_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - schedule:
          rate: rate(3 hours)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-expire-conversion
          description: 'Job for expiring the conversion based on the config'
          enabled: true

  generate_conversion_report:
    handler: application/handler/conversion_handlers.generate_conversion_report
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - schedule:
          rate: cron(0 1 * * ? *)
          name: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}-generate-conversion-report
          description: 'Job for generating the conversion report'
          enabled: true

  get_liquidity_data:
    handler: application/handler/conversion_handlers.get_converter_liquidity_balance
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    warmup: true
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_DERIVED_ADDRESS_SERVICE_BASE_PATH}
    events:
      - http:
          path: /v1/conversion/liquidity
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                token_pair_id: true
          documentation:
            summary: "Getting liquidity information by token pair id"
            description: "Getting liquidity information by token pair id"
            tags:
              - "Conversion"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get liquidity information by token pair id"
                responseModels:
                  "application/json": "GetLiquidityDataOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                "application/json": "LambdaErrorMessage"

  get_cardano_latest_block_no:
    handler: application/handler/blockchain_handlers.get_cardano_latest_block_no
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/conversion/cardanolastblockno
          method: get
          cors: ${self:custom.defaultCors}

  get_all_liquidity_addresses:
    handler: application/handler/conversion_handlers.get_converter_liquidity_addresses
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpcWithCardanoSG}
    layers: ${self:custom.defaultLayers}
    environment:
      CARDANO_SERVICE_BASE_PATH: ${file(./config.${self:provider.stage}.json):CARDANO_DERIVED_ADDRESS_SERVICE_BASE_PATH}

